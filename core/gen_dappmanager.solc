pragma solidity ^0.4.22;

/**
 * @title DApp Decentralized Manager
**/
contract DAppManager
{
    ////////////////////////
    // Type declarations
    ////////////////////////

    struct DAppInformation {
        address dappAddress;
        string  dappName;
        string  orgName;
        string  orgDescription;
        uint8   nationalityCode;
        uint8   ledgerReplicated;
        bytes32 icon;
        uint8   state;
        string  ext0;
        string  ext1;
        string  ext2;
        uint256 lastActive;
        bool    initialized;
    }

    ////////////////////////
    // Immutable state
    ////////////////////////

    ////////////////////////
    // Mutable state
    ////////////////////////

    mapping(address => DAppInformation) private dappInfoMap;

    ////////////////////////
    // Modifiers
    ////////////////////////

    ////////////////////////
    // Events
    ////////////////////////
    event UpdateDAppInfoAccepted();

    event RegisterDAppInfoAccepted();

    ////////////////////////
    // Constructor
    ////////////////////////

    constructor() public
    {
    }

    ////////////////////////
    // Public functions
    ////////////////////////

    function registerDAppInfo(string dappName, string orgName, string orgDescription, uint8 nationalityCode, uint8 ledgerReplicated, bytes32 icon, string ext0, string  ext1, string  ext2)
            public
            payable
    {
        require(dappInfoMap[msg.sender].initialized == false);
        require(bytes(dappName).length > 0);
        require(bytes(orgName).length > 0);
        require(bytes(orgDescription).length > 0);
        require(nationalityCode > 0);
        require(ledgerReplicated > 0);

        dappInfoMap[msg.sender] = DAppInformation({
            dappAddress: msg.sender,
            dappName: dappName,
            orgName: orgName,
            orgDescription: orgDescription,
            nationalityCode: nationalityCode,
            ledgerReplicated: ledgerReplicated,
            icon: icon,
            state: 1,
            ext0: ext0,
            ext1: ext1,
            ext2: ext2,
            lastActive: now,
            initialized: true

        });
        emit RegisterDAppInfoAccepted();
    }

    function updateDAppInfo(string orgDescription, uint8 ledgerReplicated, bytes32 icon)
        public
        payable
    {
        require(dappInfoMap[msg.sender].initialized == true);
        require(bytes(orgDescription).length > 0);
        require(ledgerReplicated > 0);

        DAppInformation storage info = dappInfoMap[msg.sender];
        info.orgDescription = orgDescription;
        info.ledgerReplicated = ledgerReplicated;
        info.icon = icon;
        emit UpdateDAppInfoAccepted();
    }

    function getDAppInfo(address dappId)
        public
        constant
        returns (
           address dappAddress,
           string  dappName,
           string  orgName,
           string  orgDescription,
           uint8   nationalityCode,
           uint8   ledgerReplicated,
           uint8   state,
           uint256 lastActive,
           bytes32 icon
        )
    {
        require(dappInfoMap[dappId].initialized == true);
        require(dappId == address(0));

        DAppInformation storage info = dappInfoMap[dappId];
        return (
            info.dappAddress,
            info.dappName,
            info.orgName,
            info.orgDescription,
            info.nationalityCode,
            info.ledgerReplicated,
            info.state,
            info.lastActive,
            info.icon
        );
    }

    ////////////////////////
    // Internal functions
    ////////////////////////

}
